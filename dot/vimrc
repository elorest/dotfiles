" " ========================================================================
" " Isaac Sloan - Vim Configuration 2012
" " ========================================================================
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" My bundles
Plugin 'ervandew/supertab'
" Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-fugitive'
Plugin 'jakemoldham/yellow-metal'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-haml'
Plugin 'slim-template/vim-slim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-ragtag'
Plugin 'tpope/vim-endwise'
Plugin 'vim-ruby/vim-ruby'
Plugin 'rhysd/vim-crystal'
Plugin 'isaacsloan/vim-slang'
Plugin 'tpope/vim-vinegar'
Plugin 'mattn/gist-vim'
Plugin 'mattn/webapi-vim'
" Plugin 'Shougo/unite.vim' possible fuzzy finder use. Seems popular.
Plugin 'kien/ctrlp.vim'
Plugin 'henrik/vim-qargs'
Plugin 'rking/ag.vim'
Plugin 'othree/html5.vim'
Plugin 'Raimondi/delimitMate'
" Plugin 'jiangmiao/auto-pairs'
Plugin 'tomtom/tcomment_vim'
" Plugin 'vim-scripts/HTML-AutoCloseTag'
Plugin 'Lokaltog/vim-powerline'
" Plugin 'bling/vim-airline'
Plugin 'koron/nyancat-vim'
Plugin 'ap/vim-css-color'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'scrooloose/nerdtree'
" Plugin 'Lokaltog/vim-easymotion'
Plugin 'kchmck/vim-coffee-script'
" Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'Yggdroot/indentLine'
" Plugin 'airblade/vim-gitgutter' # Makes everything slow i think.
Plugin 'terryma/vim-multiple-cursors'
Plugin 'zeekay/vice-colorful'
Plugin 'isaacsloan/detailed-vim' 
Plugin 'luochen1990/rainbow'
" Plugin 'lucapette/vim-ruby-doc'

" Makes it so I can select within ruby blocks
Plugin 'kana/vim-textobj-user'
Plugin 'nelstrom/vim-textobj-rubyblock'
" end vundle 
call vundle#end() 

runtime macros/matchit.vim

" Ruby stuff
syntax enable
filetype plugin indent on
set autowrite

augroup myfiletypes
	autocmd!
	autocmd FileType slim,coffee,ruby,eruby,yaml,cpp,scss,c,crystal set ai sw=2 sts=2 et
augroup END

" Ruby Complete
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1

" Key Bindings
" let mapleader = ","
let mapleader = "\<space>"
map <Leader>n :NERDTreeToggle<cr>
map <Leader>cn :vsplit ~/Dropbox/notes/coding-notes.txt<cr>
map <Leader>vc :vsplit ~/Dropbox/notes/vim-cheat.txt<cr>
map <Leader>ff mfgg=G`fzz
map <Leader>fc :CrystalFormat<CR>
map <Leader>fl 0$
map <Leader>t <C-p>
map <Leader>w :w<CR>
map <Leader>W :w !sudo tee % > /dev/null<CR>
map <Leader>x :x<CR>
map <Leader>q :q<CR>
map <Leader>Q :q!<CR>
map <Leader>; :

" system clipboards
map <Leader>y "+y
map <Leader>d "+d
map <Leader>p "+p
map <Leader>P "+P

" Only useful for ERB
map <Leader>e a<% x %><Esc>Fxxi
map <Leader>e= a<%= x %><Esc>Fxxi
map <Leader>el a<%= f.label x %><Esc>Fxxi
map <Leader>es a<%= f.select x %><Esc>Fxxi
map <Leader>et a<%= f.text_field x %><Esc>Fxxi
map <Leader>ef a<%= form_for x do %><cr><cr><%= f.submit %><cr><% end %><Esc>3kfxxi
map <Leader>ea a<%= link_to x %><Esc>Fxxi
map <Leader>elt a<%= label_tag x %><Esc>Fxxi
map <Leader>est a<%= select_tag x %><Esc>Fxxi
map <Leader>ett a<%= text_field_tag x %><Esc>Fxxi
" Crystal Macro
map <Leader>m a{% x %}<Esc>Fxxi
map <Leader>mi a{{ x }}<Esc>Fxxi

" Finds and replaces in files based on the the current line.
map <Leader>fr ^l"ayt/^v$h"byu:vsp<CR>:Ag "<C-R>a"<CR>:Qdo %s<C-R>bge \| update<CR>
" Same as above but asks before all the changes.
map <Leader>far ^l"ayt/^v$h"byu:vsp<CR>:Ag "<C-R>a"<CR>:Qdo %s<C-R>bgce \| update<CR>
" Git Bindings
map <Leader>ga :Git add -A<CR>
map <Leader>gcm :Git commit -am ""<LEFT>
map <Leader>gp :Git push<CR>
map <Leader>gu :Git pull<CR>
map <Leader>gst Git status<CR>
map <Leader>g Git 

" Toggles relativenumber on and off.
function! RelativeNumberToggle()
	if(&relativenumber == 1)
		set number
		set norelativenumber
	else
		set relativenumber
	endif
endfunction 

" Toggles line numbers on and off.
function! NumberToggle()
	if(&number == 1)
		set nonumber
	else
		set number
	endif
endfunction 
map <Leader>r :call RelativeNumberToggle()<CR>
map <Leader>R :call NumberToggle()<CR>

" Block changes
map <Leader>b{ vir<Esc>`>/end<CR>ciw}<Esc>`<?do<CR>diwr{v%J<Esc>
map <Leader>bd ?{<CR>v%<Esc>`>send<Esc>`<sdo <Esc>
" window movements
map <Leader>j <C-w>j
map <Leader>k <C-w>k
map <Leader>h <C-w>h
map <Leader>l <C-w>l
map <Leader>J <C-w>J
map <Leader>K <C-w>K
map <Leader>H <C-w>H
map <Leader>L <C-w>L

" Add new line on enter
map <S-CR> mnO<Esc>`n
map <CR> mno<Esc>`n
map <TAB> ==
vmap <TAB> =
vnoremap > ><CR>gv 
vnoremap < <<CR>gv

function s:MkNonExDir(file, buf)
	if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
		let dir=fnamemodify(a:file, ':h')
		if !isdirectory(dir)
			call mkdir(dir, 'p')
		endif
	endif
endfunction
augroup BWCCreateDir
	autocmd!
	autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" Other settings
" let g:ctrlp_custom_ignore = '\v\.(svg|jpeg|jpg|JPG|png|git)$'
" let g:ctrlp_custom_ignore = {'dir':  '\v[\/]\.(git|hg|svn)$','file': '\v\.(exe|jpeg|png|jpeg|svg|dll)$','link': 'SOME_BAD_SYMBOLIC_LINKS',}
let g:ctrlp_working_path_mode = 'ra'
"let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others']
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden --ignore .git --ignore .svn --ignore .hg --ignore .DS_Store --ignore "**/*.pyc" -g ""'
" let g:ctrlp_user_command = 'find %s -type f'

let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_get_multiplefile = 1
" colorscheme detailed
set t_Co=256
" syntax on
colorscheme yellow-metal
let g:rainbow_active = 1
" colorscheme vividchalk 
" colorscheme atom-dark
highlight Pmenu guibg=brown gui=bold
let g:molokai_original = 1
set number
set nowrap
set hlsearch
set encoding=utf-8
let g:Powerline_symbols = 'fancy'
" set guifont=Inconsolata:h14,Monaco:h12
" set antialias
"let g:NERDTreeWinPos = "right"
set guioptions-=T " Removes top toolbar
set guioptions-=r " Removes right hand scroll bar
set go-=L " Removes left hand scroll bar

" turn backups and swaps off
set nobackup  
set nowritebackup 
set noswapfile 
" set backupdir=~/.vim/tmp,.
" set directory=~/.vim/tmp,.

" turns on persistant history
set undodir=~/.vimundodir
set undofile
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload"

" set shellcmdflag=-ic " Uses bash settings from terminal. This makes vim suspend on startup in terminal vim though.
nnoremap gfv :vert winc f<cr>
nnoremap gfx :winc f<cr>
